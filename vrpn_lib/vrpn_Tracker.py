# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_vrpn_Tracker', [dirname(__file__)])
        except ImportError:
            import _vrpn_Tracker
            return _vrpn_Tracker
        if fp is not None:
            try:
                _mod = imp.load_module('_vrpn_Tracker', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _vrpn_Tracker = swig_import_helper()
    del swig_import_helper
else:
    import _vrpn_Tracker
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


vrpn_DEFAULT_LISTEN_PORT_NO = _vrpn_Tracker.vrpn_DEFAULT_LISTEN_PORT_NO
VRPN_VIEWPOINT_H = _vrpn_Tracker.VRPN_VIEWPOINT_H
VRPN_SYSTEMDRIVE = _vrpn_Tracker.VRPN_SYSTEMDRIVE
VRPN_PHASESPACE_LIB_PATH = _vrpn_Tracker.VRPN_PHASESPACE_LIB_PATH
VRPN_WIIUSE_H = _vrpn_Tracker.VRPN_WIIUSE_H
VRPN_TRIVISIOCOLIBRI_H = _vrpn_Tracker.VRPN_TRIVISIOCOLIBRI_H
VRPN_TRIVISIOCOLIBRI_LIB_PATH = _vrpn_Tracker.VRPN_TRIVISIOCOLIBRI_LIB_PATH
VRPN_GHOST_31_PATH = _vrpn_Tracker.VRPN_GHOST_31_PATH
VRPN_GHOST_40_PATH = _vrpn_Tracker.VRPN_GHOST_40_PATH
VRPN_NIDAQ_PATH = _vrpn_Tracker.VRPN_NIDAQ_PATH
VRPN_USDIGITAL_PATH = _vrpn_Tracker.VRPN_USDIGITAL_PATH
vrpn_TEXT_NORMAL = _vrpn_Tracker.vrpn_TEXT_NORMAL
vrpn_TEXT_WARNING = _vrpn_Tracker.vrpn_TEXT_WARNING
vrpn_TEXT_ERROR = _vrpn_Tracker.vrpn_TEXT_ERROR
class vrpn_TextPrinter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vrpn_TextPrinter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vrpn_TextPrinter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vrpn_Tracker.new_vrpn_TextPrinter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrpn_Tracker.delete_vrpn_TextPrinter
    __del__ = lambda self : None;
    def add_object(self, *args): return _vrpn_Tracker.vrpn_TextPrinter_add_object(self, *args)
    def remove_object(self, *args): return _vrpn_Tracker.vrpn_TextPrinter_remove_object(self, *args)
    def set_min_level_to_print(self, *args): return _vrpn_Tracker.vrpn_TextPrinter_set_min_level_to_print(self, *args)
    def set_ostream_to_use(self, *args): return _vrpn_Tracker.vrpn_TextPrinter_set_ostream_to_use(self, *args)
vrpn_TextPrinter_swigregister = _vrpn_Tracker.vrpn_TextPrinter_swigregister
vrpn_TextPrinter_swigregister(vrpn_TextPrinter)
cvar = _vrpn_Tracker.cvar
vrpn_MAX_BCADRS = cvar.vrpn_MAX_BCADRS
vrpn_MAX_TEXT_LEN = cvar.vrpn_MAX_TEXT_LEN

class vrpn_BaseClassUnique(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vrpn_BaseClassUnique, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vrpn_BaseClassUnique, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vrpn_Tracker.new_vrpn_BaseClassUnique()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrpn_Tracker.delete_vrpn_BaseClassUnique
    __del__ = lambda self : None;
    def connectionPtr(self): return _vrpn_Tracker.vrpn_BaseClassUnique_connectionPtr(self)
    __swig_setmethods__["shutup"] = _vrpn_Tracker.vrpn_BaseClassUnique_shutup_set
    __swig_getmethods__["shutup"] = _vrpn_Tracker.vrpn_BaseClassUnique_shutup_get
    if _newclass:shutup = _swig_property(_vrpn_Tracker.vrpn_BaseClassUnique_shutup_get, _vrpn_Tracker.vrpn_BaseClassUnique_shutup_set)
vrpn_BaseClassUnique_swigregister = _vrpn_Tracker.vrpn_BaseClassUnique_swigregister
vrpn_BaseClassUnique_swigregister(vrpn_BaseClassUnique)

class vrpn_BaseClass(vrpn_BaseClassUnique):
    __swig_setmethods__ = {}
    for _s in [vrpn_BaseClassUnique]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, vrpn_BaseClass, name, value)
    __swig_getmethods__ = {}
    for _s in [vrpn_BaseClassUnique]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, vrpn_BaseClass, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vrpn_Tracker.delete_vrpn_BaseClass
    __del__ = lambda self : None;
    def mainloop(self): return _vrpn_Tracker.vrpn_BaseClass_mainloop(self)
vrpn_BaseClass_swigregister = _vrpn_Tracker.vrpn_BaseClass_swigregister
vrpn_BaseClass_swigregister(vrpn_BaseClass)

LISTEN = _vrpn_Tracker.LISTEN
CONNECTED = _vrpn_Tracker.CONNECTED
COOKIE_PENDING = _vrpn_Tracker.COOKIE_PENDING
TRYING_TO_CONNECT = _vrpn_Tracker.TRYING_TO_CONNECT
BROKEN = _vrpn_Tracker.BROKEN
LOGGING = _vrpn_Tracker.LOGGING
class vrpn_HANDLERPARAM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vrpn_HANDLERPARAM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vrpn_HANDLERPARAM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _vrpn_Tracker.vrpn_HANDLERPARAM_type_set
    __swig_getmethods__["type"] = _vrpn_Tracker.vrpn_HANDLERPARAM_type_get
    if _newclass:type = _swig_property(_vrpn_Tracker.vrpn_HANDLERPARAM_type_get, _vrpn_Tracker.vrpn_HANDLERPARAM_type_set)
    __swig_setmethods__["sender"] = _vrpn_Tracker.vrpn_HANDLERPARAM_sender_set
    __swig_getmethods__["sender"] = _vrpn_Tracker.vrpn_HANDLERPARAM_sender_get
    if _newclass:sender = _swig_property(_vrpn_Tracker.vrpn_HANDLERPARAM_sender_get, _vrpn_Tracker.vrpn_HANDLERPARAM_sender_set)
    __swig_setmethods__["msg_time"] = _vrpn_Tracker.vrpn_HANDLERPARAM_msg_time_set
    __swig_getmethods__["msg_time"] = _vrpn_Tracker.vrpn_HANDLERPARAM_msg_time_get
    if _newclass:msg_time = _swig_property(_vrpn_Tracker.vrpn_HANDLERPARAM_msg_time_get, _vrpn_Tracker.vrpn_HANDLERPARAM_msg_time_set)
    __swig_setmethods__["payload_len"] = _vrpn_Tracker.vrpn_HANDLERPARAM_payload_len_set
    __swig_getmethods__["payload_len"] = _vrpn_Tracker.vrpn_HANDLERPARAM_payload_len_get
    if _newclass:payload_len = _swig_property(_vrpn_Tracker.vrpn_HANDLERPARAM_payload_len_get, _vrpn_Tracker.vrpn_HANDLERPARAM_payload_len_set)
    __swig_setmethods__["buffer"] = _vrpn_Tracker.vrpn_HANDLERPARAM_buffer_set
    __swig_getmethods__["buffer"] = _vrpn_Tracker.vrpn_HANDLERPARAM_buffer_get
    if _newclass:buffer = _swig_property(_vrpn_Tracker.vrpn_HANDLERPARAM_buffer_get, _vrpn_Tracker.vrpn_HANDLERPARAM_buffer_set)
    def __init__(self): 
        this = _vrpn_Tracker.new_vrpn_HANDLERPARAM()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrpn_Tracker.delete_vrpn_HANDLERPARAM
    __del__ = lambda self : None;
vrpn_HANDLERPARAM_swigregister = _vrpn_Tracker.vrpn_HANDLERPARAM_swigregister
vrpn_HANDLERPARAM_swigregister(vrpn_HANDLERPARAM)

class vrpn_LOGLIST(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vrpn_LOGLIST, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vrpn_LOGLIST, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _vrpn_Tracker.vrpn_LOGLIST_data_set
    __swig_getmethods__["data"] = _vrpn_Tracker.vrpn_LOGLIST_data_get
    if _newclass:data = _swig_property(_vrpn_Tracker.vrpn_LOGLIST_data_get, _vrpn_Tracker.vrpn_LOGLIST_data_set)
    __swig_setmethods__["next"] = _vrpn_Tracker.vrpn_LOGLIST_next_set
    __swig_getmethods__["next"] = _vrpn_Tracker.vrpn_LOGLIST_next_get
    if _newclass:next = _swig_property(_vrpn_Tracker.vrpn_LOGLIST_next_get, _vrpn_Tracker.vrpn_LOGLIST_next_set)
    __swig_setmethods__["prev"] = _vrpn_Tracker.vrpn_LOGLIST_prev_set
    __swig_getmethods__["prev"] = _vrpn_Tracker.vrpn_LOGLIST_prev_get
    if _newclass:prev = _swig_property(_vrpn_Tracker.vrpn_LOGLIST_prev_get, _vrpn_Tracker.vrpn_LOGLIST_prev_set)
    def __init__(self): 
        this = _vrpn_Tracker.new_vrpn_LOGLIST()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrpn_Tracker.delete_vrpn_LOGLIST
    __del__ = lambda self : None;
vrpn_LOGLIST_swigregister = _vrpn_Tracker.vrpn_LOGLIST_swigregister
vrpn_LOGLIST_swigregister(vrpn_LOGLIST)
vrpn_ALIGN = cvar.vrpn_ALIGN
vrpn_CONNECTION_MAX_SENDERS = cvar.vrpn_CONNECTION_MAX_SENDERS
vrpn_CONNECTION_MAX_TYPES = cvar.vrpn_CONNECTION_MAX_TYPES
vrpn_ANY_SENDER = cvar.vrpn_ANY_SENDER
vrpn_ANY_TYPE = cvar.vrpn_ANY_TYPE
vrpn_CONNECTION_TCP_BUFLEN = cvar.vrpn_CONNECTION_TCP_BUFLEN
vrpn_CONNECTION_UDP_BUFLEN = cvar.vrpn_CONNECTION_UDP_BUFLEN
vrpn_MAX_ENDPOINTS = cvar.vrpn_MAX_ENDPOINTS
vrpn_CONNECTION_SENDER_DESCRIPTION = cvar.vrpn_CONNECTION_SENDER_DESCRIPTION
vrpn_CONNECTION_TYPE_DESCRIPTION = cvar.vrpn_CONNECTION_TYPE_DESCRIPTION
vrpn_CONNECTION_UDP_DESCRIPTION = cvar.vrpn_CONNECTION_UDP_DESCRIPTION
vrpn_CONNECTION_LOG_DESCRIPTION = cvar.vrpn_CONNECTION_LOG_DESCRIPTION
vrpn_CONNECTION_DISCONNECT_MESSAGE = cvar.vrpn_CONNECTION_DISCONNECT_MESSAGE
vrpn_CONNECTION_RELIABLE = cvar.vrpn_CONNECTION_RELIABLE
vrpn_CONNECTION_FIXED_LATENCY = cvar.vrpn_CONNECTION_FIXED_LATENCY
vrpn_CONNECTION_LOW_LATENCY = cvar.vrpn_CONNECTION_LOW_LATENCY
vrpn_CONNECTION_FIXED_THROUGHPUT = cvar.vrpn_CONNECTION_FIXED_THROUGHPUT
vrpn_CONNECTION_HIGH_THROUGHPUT = cvar.vrpn_CONNECTION_HIGH_THROUGHPUT
vrpn_LOG_NONE = cvar.vrpn_LOG_NONE
vrpn_LOG_INCOMING = cvar.vrpn_LOG_INCOMING
vrpn_LOG_OUTGOING = cvar.vrpn_LOG_OUTGOING

class BoundEndpointAllocator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundEndpointAllocator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoundEndpointAllocator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vrpn_Tracker.new_BoundEndpointAllocator(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _vrpn_Tracker.BoundEndpointAllocator___call__(self, *args)
    __swig_destroy__ = _vrpn_Tracker.delete_BoundEndpointAllocator
    __del__ = lambda self : None;
BoundEndpointAllocator_swigregister = _vrpn_Tracker.BoundEndpointAllocator_swigregister
BoundEndpointAllocator_swigregister(BoundEndpointAllocator)

class vrpnMsgCallbackEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vrpnMsgCallbackEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vrpnMsgCallbackEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["handler"] = _vrpn_Tracker.vrpnMsgCallbackEntry_handler_set
    __swig_getmethods__["handler"] = _vrpn_Tracker.vrpnMsgCallbackEntry_handler_get
    if _newclass:handler = _swig_property(_vrpn_Tracker.vrpnMsgCallbackEntry_handler_get, _vrpn_Tracker.vrpnMsgCallbackEntry_handler_set)
    __swig_setmethods__["userdata"] = _vrpn_Tracker.vrpnMsgCallbackEntry_userdata_set
    __swig_getmethods__["userdata"] = _vrpn_Tracker.vrpnMsgCallbackEntry_userdata_get
    if _newclass:userdata = _swig_property(_vrpn_Tracker.vrpnMsgCallbackEntry_userdata_get, _vrpn_Tracker.vrpnMsgCallbackEntry_userdata_set)
    __swig_setmethods__["sender"] = _vrpn_Tracker.vrpnMsgCallbackEntry_sender_set
    __swig_getmethods__["sender"] = _vrpn_Tracker.vrpnMsgCallbackEntry_sender_get
    if _newclass:sender = _swig_property(_vrpn_Tracker.vrpnMsgCallbackEntry_sender_get, _vrpn_Tracker.vrpnMsgCallbackEntry_sender_set)
    __swig_setmethods__["next"] = _vrpn_Tracker.vrpnMsgCallbackEntry_next_set
    __swig_getmethods__["next"] = _vrpn_Tracker.vrpnMsgCallbackEntry_next_get
    if _newclass:next = _swig_property(_vrpn_Tracker.vrpnMsgCallbackEntry_next_get, _vrpn_Tracker.vrpnMsgCallbackEntry_next_set)
    def __init__(self): 
        this = _vrpn_Tracker.new_vrpnMsgCallbackEntry()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrpn_Tracker.delete_vrpnMsgCallbackEntry
    __del__ = lambda self : None;
vrpnMsgCallbackEntry_swigregister = _vrpn_Tracker.vrpnMsgCallbackEntry_swigregister
vrpnMsgCallbackEntry_swigregister(vrpnMsgCallbackEntry)

class vrpnLogFilterEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vrpnLogFilterEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vrpnLogFilterEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["filter"] = _vrpn_Tracker.vrpnLogFilterEntry_filter_set
    __swig_getmethods__["filter"] = _vrpn_Tracker.vrpnLogFilterEntry_filter_get
    if _newclass:filter = _swig_property(_vrpn_Tracker.vrpnLogFilterEntry_filter_get, _vrpn_Tracker.vrpnLogFilterEntry_filter_set)
    __swig_setmethods__["userdata"] = _vrpn_Tracker.vrpnLogFilterEntry_userdata_set
    __swig_getmethods__["userdata"] = _vrpn_Tracker.vrpnLogFilterEntry_userdata_get
    if _newclass:userdata = _swig_property(_vrpn_Tracker.vrpnLogFilterEntry_userdata_get, _vrpn_Tracker.vrpnLogFilterEntry_userdata_set)
    __swig_setmethods__["next"] = _vrpn_Tracker.vrpnLogFilterEntry_next_set
    __swig_getmethods__["next"] = _vrpn_Tracker.vrpnLogFilterEntry_next_get
    if _newclass:next = _swig_property(_vrpn_Tracker.vrpnLogFilterEntry_next_get, _vrpn_Tracker.vrpnLogFilterEntry_next_set)
    def __init__(self): 
        this = _vrpn_Tracker.new_vrpnLogFilterEntry()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrpn_Tracker.delete_vrpnLogFilterEntry
    __del__ = lambda self : None;
vrpnLogFilterEntry_swigregister = _vrpn_Tracker.vrpnLogFilterEntry_swigregister
vrpnLogFilterEntry_swigregister(vrpnLogFilterEntry)

class vrpn_Endpoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vrpn_Endpoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vrpn_Endpoint, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vrpn_Tracker.delete_vrpn_Endpoint
    __del__ = lambda self : None;
    def local_type_id(self, *args): return _vrpn_Tracker.vrpn_Endpoint_local_type_id(self, *args)
    def local_sender_id(self, *args): return _vrpn_Tracker.vrpn_Endpoint_local_sender_id(self, *args)
    def doing_okay(self): return _vrpn_Tracker.vrpn_Endpoint_doing_okay(self)
    def init(self): return _vrpn_Tracker.vrpn_Endpoint_init(self)
    def mainloop(self, *args): return _vrpn_Tracker.vrpn_Endpoint_mainloop(self, *args)
    def clear_other_senders_and_types(self): return _vrpn_Tracker.vrpn_Endpoint_clear_other_senders_and_types(self)
    def newLocalSender(self, *args): return _vrpn_Tracker.vrpn_Endpoint_newLocalSender(self, *args)
    def newLocalType(self, *args): return _vrpn_Tracker.vrpn_Endpoint_newLocalType(self, *args)
    def newRemoteType(self, *args): return _vrpn_Tracker.vrpn_Endpoint_newRemoteType(self, *args)
    def newRemoteSender(self, *args): return _vrpn_Tracker.vrpn_Endpoint_newRemoteSender(self, *args)
    def pack_message(self, *args): return _vrpn_Tracker.vrpn_Endpoint_pack_message(self, *args)
    def send_pending_reports(self): return _vrpn_Tracker.vrpn_Endpoint_send_pending_reports(self)
    def pack_log_description(self): return _vrpn_Tracker.vrpn_Endpoint_pack_log_description(self)
    def setup_new_connection(self): return _vrpn_Tracker.vrpn_Endpoint_setup_new_connection(self)
    def poll_for_cookie(self, timeout = None): return _vrpn_Tracker.vrpn_Endpoint_poll_for_cookie(self, timeout)
    def finish_new_connection_setup(self): return _vrpn_Tracker.vrpn_Endpoint_finish_new_connection_setup(self)
    def drop_connection(self): return _vrpn_Tracker.vrpn_Endpoint_drop_connection(self)
    def clearBuffers(self): return _vrpn_Tracker.vrpn_Endpoint_clearBuffers(self)
    def pack_sender_description(self, *args): return _vrpn_Tracker.vrpn_Endpoint_pack_sender_description(self, *args)
    def pack_type_description(self, *args): return _vrpn_Tracker.vrpn_Endpoint_pack_type_description(self, *args)
    __swig_setmethods__["status"] = _vrpn_Tracker.vrpn_Endpoint_status_set
    __swig_getmethods__["status"] = _vrpn_Tracker.vrpn_Endpoint_status_get
    if _newclass:status = _swig_property(_vrpn_Tracker.vrpn_Endpoint_status_get, _vrpn_Tracker.vrpn_Endpoint_status_set)
    __swig_setmethods__["d_remoteLogMode"] = _vrpn_Tracker.vrpn_Endpoint_d_remoteLogMode_set
    __swig_getmethods__["d_remoteLogMode"] = _vrpn_Tracker.vrpn_Endpoint_d_remoteLogMode_get
    if _newclass:d_remoteLogMode = _swig_property(_vrpn_Tracker.vrpn_Endpoint_d_remoteLogMode_get, _vrpn_Tracker.vrpn_Endpoint_d_remoteLogMode_set)
    __swig_setmethods__["d_remoteInLogName"] = _vrpn_Tracker.vrpn_Endpoint_d_remoteInLogName_set
    __swig_getmethods__["d_remoteInLogName"] = _vrpn_Tracker.vrpn_Endpoint_d_remoteInLogName_get
    if _newclass:d_remoteInLogName = _swig_property(_vrpn_Tracker.vrpn_Endpoint_d_remoteInLogName_get, _vrpn_Tracker.vrpn_Endpoint_d_remoteInLogName_set)
    __swig_setmethods__["d_remoteOutLogName"] = _vrpn_Tracker.vrpn_Endpoint_d_remoteOutLogName_set
    __swig_getmethods__["d_remoteOutLogName"] = _vrpn_Tracker.vrpn_Endpoint_d_remoteOutLogName_get
    if _newclass:d_remoteOutLogName = _swig_property(_vrpn_Tracker.vrpn_Endpoint_d_remoteOutLogName_get, _vrpn_Tracker.vrpn_Endpoint_d_remoteOutLogName_set)
    __swig_setmethods__["rhostname"] = _vrpn_Tracker.vrpn_Endpoint_rhostname_set
    __swig_getmethods__["rhostname"] = _vrpn_Tracker.vrpn_Endpoint_rhostname_get
    if _newclass:rhostname = _swig_property(_vrpn_Tracker.vrpn_Endpoint_rhostname_get, _vrpn_Tracker.vrpn_Endpoint_rhostname_set)
    __swig_setmethods__["d_inLog"] = _vrpn_Tracker.vrpn_Endpoint_d_inLog_set
    __swig_getmethods__["d_inLog"] = _vrpn_Tracker.vrpn_Endpoint_d_inLog_get
    if _newclass:d_inLog = _swig_property(_vrpn_Tracker.vrpn_Endpoint_d_inLog_get, _vrpn_Tracker.vrpn_Endpoint_d_inLog_set)
    __swig_setmethods__["d_outLog"] = _vrpn_Tracker.vrpn_Endpoint_d_outLog_set
    __swig_getmethods__["d_outLog"] = _vrpn_Tracker.vrpn_Endpoint_d_outLog_get
    if _newclass:d_outLog = _swig_property(_vrpn_Tracker.vrpn_Endpoint_d_outLog_get, _vrpn_Tracker.vrpn_Endpoint_d_outLog_set)
    def setLogNames(self, *args): return _vrpn_Tracker.vrpn_Endpoint_setLogNames(self, *args)
    def openLogs(self): return _vrpn_Tracker.vrpn_Endpoint_openLogs(self)
    __swig_getmethods__["handle_sender_message"] = lambda x: _vrpn_Tracker.vrpn_Endpoint_handle_sender_message
    if _newclass:handle_sender_message = staticmethod(_vrpn_Tracker.vrpn_Endpoint_handle_sender_message)
    __swig_getmethods__["handle_type_message"] = lambda x: _vrpn_Tracker.vrpn_Endpoint_handle_type_message
    if _newclass:handle_type_message = staticmethod(_vrpn_Tracker.vrpn_Endpoint_handle_type_message)
    def setConnection(self, *args): return _vrpn_Tracker.vrpn_Endpoint_setConnection(self, *args)
    def getConnection(self): return _vrpn_Tracker.vrpn_Endpoint_getConnection(self)
vrpn_Endpoint_swigregister = _vrpn_Tracker.vrpn_Endpoint_swigregister
vrpn_Endpoint_swigregister(vrpn_Endpoint)

def vrpn_Endpoint_handle_sender_message(*args):
  return _vrpn_Tracker.vrpn_Endpoint_handle_sender_message(*args)
vrpn_Endpoint_handle_sender_message = _vrpn_Tracker.vrpn_Endpoint_handle_sender_message

def vrpn_Endpoint_handle_type_message(*args):
  return _vrpn_Tracker.vrpn_Endpoint_handle_type_message(*args)
vrpn_Endpoint_handle_type_message = _vrpn_Tracker.vrpn_Endpoint_handle_type_message

class vrpn_Endpoint_IP(vrpn_Endpoint):
    __swig_setmethods__ = {}
    for _s in [vrpn_Endpoint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, vrpn_Endpoint_IP, name, value)
    __swig_getmethods__ = {}
    for _s in [vrpn_Endpoint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, vrpn_Endpoint_IP, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vrpn_Tracker.new_vrpn_Endpoint_IP(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrpn_Tracker.delete_vrpn_Endpoint_IP
    __del__ = lambda self : None;
    def doing_okay(self): return _vrpn_Tracker.vrpn_Endpoint_IP_doing_okay(self)
    def outbound_udp_open(self): return _vrpn_Tracker.vrpn_Endpoint_IP_outbound_udp_open(self)
    def tcp_outbuf_size(self): return _vrpn_Tracker.vrpn_Endpoint_IP_tcp_outbuf_size(self)
    def udp_outbuf_size(self): return _vrpn_Tracker.vrpn_Endpoint_IP_udp_outbuf_size(self)
    def init(self): return _vrpn_Tracker.vrpn_Endpoint_IP_init(self)
    def mainloop(self, *args): return _vrpn_Tracker.vrpn_Endpoint_IP_mainloop(self, *args)
    def pack_message(self, *args): return _vrpn_Tracker.vrpn_Endpoint_IP_pack_message(self, *args)
    def send_pending_reports(self): return _vrpn_Tracker.vrpn_Endpoint_IP_send_pending_reports(self)
    def pack_udp_description(self, *args): return _vrpn_Tracker.vrpn_Endpoint_IP_pack_udp_description(self, *args)
    def handle_tcp_messages(self, *args): return _vrpn_Tracker.vrpn_Endpoint_IP_handle_tcp_messages(self, *args)
    def handle_udp_messages(self, *args): return _vrpn_Tracker.vrpn_Endpoint_IP_handle_udp_messages(self, *args)
    def connect_tcp_to(self, *args): return _vrpn_Tracker.vrpn_Endpoint_IP_connect_tcp_to(self, *args)
    def connect_udp_to(self, *args): return _vrpn_Tracker.vrpn_Endpoint_IP_connect_udp_to(self, *args)
    def set_tcp_outbuf_size(self, *args): return _vrpn_Tracker.vrpn_Endpoint_IP_set_tcp_outbuf_size(self, *args)
    def setup_new_connection(self): return _vrpn_Tracker.vrpn_Endpoint_IP_setup_new_connection(self)
    def poll_for_cookie(self, timeout = None): return _vrpn_Tracker.vrpn_Endpoint_IP_poll_for_cookie(self, timeout)
    def finish_new_connection_setup(self): return _vrpn_Tracker.vrpn_Endpoint_IP_finish_new_connection_setup(self)
    def drop_connection(self): return _vrpn_Tracker.vrpn_Endpoint_IP_drop_connection(self)
    def clearBuffers(self): return _vrpn_Tracker.vrpn_Endpoint_IP_clearBuffers(self)
    def setNICaddress(self, *args): return _vrpn_Tracker.vrpn_Endpoint_IP_setNICaddress(self, *args)
    __swig_setmethods__["d_tcpSocket"] = _vrpn_Tracker.vrpn_Endpoint_IP_d_tcpSocket_set
    __swig_getmethods__["d_tcpSocket"] = _vrpn_Tracker.vrpn_Endpoint_IP_d_tcpSocket_get
    if _newclass:d_tcpSocket = _swig_property(_vrpn_Tracker.vrpn_Endpoint_IP_d_tcpSocket_get, _vrpn_Tracker.vrpn_Endpoint_IP_d_tcpSocket_set)
    __swig_setmethods__["d_tcpListenSocket"] = _vrpn_Tracker.vrpn_Endpoint_IP_d_tcpListenSocket_set
    __swig_getmethods__["d_tcpListenSocket"] = _vrpn_Tracker.vrpn_Endpoint_IP_d_tcpListenSocket_get
    if _newclass:d_tcpListenSocket = _swig_property(_vrpn_Tracker.vrpn_Endpoint_IP_d_tcpListenSocket_get, _vrpn_Tracker.vrpn_Endpoint_IP_d_tcpListenSocket_set)
    __swig_setmethods__["d_tcpListenPort"] = _vrpn_Tracker.vrpn_Endpoint_IP_d_tcpListenPort_set
    __swig_getmethods__["d_tcpListenPort"] = _vrpn_Tracker.vrpn_Endpoint_IP_d_tcpListenPort_get
    if _newclass:d_tcpListenPort = _swig_property(_vrpn_Tracker.vrpn_Endpoint_IP_d_tcpListenPort_get, _vrpn_Tracker.vrpn_Endpoint_IP_d_tcpListenPort_set)
    __swig_setmethods__["d_udpLobSocket"] = _vrpn_Tracker.vrpn_Endpoint_IP_d_udpLobSocket_set
    __swig_getmethods__["d_udpLobSocket"] = _vrpn_Tracker.vrpn_Endpoint_IP_d_udpLobSocket_get
    if _newclass:d_udpLobSocket = _swig_property(_vrpn_Tracker.vrpn_Endpoint_IP_d_udpLobSocket_get, _vrpn_Tracker.vrpn_Endpoint_IP_d_udpLobSocket_set)
    __swig_setmethods__["d_remote_machine_name"] = _vrpn_Tracker.vrpn_Endpoint_IP_d_remote_machine_name_set
    __swig_getmethods__["d_remote_machine_name"] = _vrpn_Tracker.vrpn_Endpoint_IP_d_remote_machine_name_get
    if _newclass:d_remote_machine_name = _swig_property(_vrpn_Tracker.vrpn_Endpoint_IP_d_remote_machine_name_get, _vrpn_Tracker.vrpn_Endpoint_IP_d_remote_machine_name_set)
    __swig_setmethods__["d_remote_port_number"] = _vrpn_Tracker.vrpn_Endpoint_IP_d_remote_port_number_set
    __swig_getmethods__["d_remote_port_number"] = _vrpn_Tracker.vrpn_Endpoint_IP_d_remote_port_number_get
    if _newclass:d_remote_port_number = _swig_property(_vrpn_Tracker.vrpn_Endpoint_IP_d_remote_port_number_get, _vrpn_Tracker.vrpn_Endpoint_IP_d_remote_port_number_set)
    __swig_setmethods__["d_last_connect_attempt"] = _vrpn_Tracker.vrpn_Endpoint_IP_d_last_connect_attempt_set
    __swig_getmethods__["d_last_connect_attempt"] = _vrpn_Tracker.vrpn_Endpoint_IP_d_last_connect_attempt_get
    if _newclass:d_last_connect_attempt = _swig_property(_vrpn_Tracker.vrpn_Endpoint_IP_d_last_connect_attempt_get, _vrpn_Tracker.vrpn_Endpoint_IP_d_last_connect_attempt_set)
    __swig_setmethods__["d_tcp_only"] = _vrpn_Tracker.vrpn_Endpoint_IP_d_tcp_only_set
    __swig_getmethods__["d_tcp_only"] = _vrpn_Tracker.vrpn_Endpoint_IP_d_tcp_only_get
    if _newclass:d_tcp_only = _swig_property(_vrpn_Tracker.vrpn_Endpoint_IP_d_tcp_only_get, _vrpn_Tracker.vrpn_Endpoint_IP_d_tcp_only_set)
vrpn_Endpoint_IP_swigregister = _vrpn_Tracker.vrpn_Endpoint_IP_swigregister
vrpn_Endpoint_IP_swigregister(vrpn_Endpoint_IP)

class vrpn_Connection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vrpn_Connection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vrpn_Connection, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vrpn_Tracker.delete_vrpn_Connection
    __del__ = lambda self : None;
    def doing_okay(self): return _vrpn_Tracker.vrpn_Connection_doing_okay(self)
    def connected(self): return _vrpn_Tracker.vrpn_Connection_connected(self)
    def get_log_names(self, *args): return _vrpn_Tracker.vrpn_Connection_get_log_names(self, *args)
    def mainloop(self, timeout = None): return _vrpn_Tracker.vrpn_Connection_mainloop(self, timeout)
    def register_sender(self, *args): return _vrpn_Tracker.vrpn_Connection_register_sender(self, *args)
    def register_message_type(self, *args): return _vrpn_Tracker.vrpn_Connection_register_message_type(self, *args)
    def register_handler(self, *args): return _vrpn_Tracker.vrpn_Connection_register_handler(self, *args)
    def unregister_handler(self, *args): return _vrpn_Tracker.vrpn_Connection_unregister_handler(self, *args)
    def pack_message(self, *args): return _vrpn_Tracker.vrpn_Connection_pack_message(self, *args)
    def send_pending_reports(self): return _vrpn_Tracker.vrpn_Connection_send_pending_reports(self)
    def time_since_connection_open(self, *args): return _vrpn_Tracker.vrpn_Connection_time_since_connection_open(self, *args)
    def get_time(self): return _vrpn_Tracker.vrpn_Connection_get_time(self)
    def sender_name(self, *args): return _vrpn_Tracker.vrpn_Connection_sender_name(self, *args)
    def message_type_name(self, *args): return _vrpn_Tracker.vrpn_Connection_message_type_name(self, *args)
    def register_log_filter(self, *args): return _vrpn_Tracker.vrpn_Connection_register_log_filter(self, *args)
    def save_log_so_far(self): return _vrpn_Tracker.vrpn_Connection_save_log_so_far(self)
    def get_File_Connection(self): return _vrpn_Tracker.vrpn_Connection_get_File_Connection(self)
    def Jane_stop_this_crazy_thing(self, *args): return _vrpn_Tracker.vrpn_Connection_Jane_stop_this_crazy_thing(self, *args)
    def get_Jane_value(self): return _vrpn_Tracker.vrpn_Connection_get_Jane_value(self)
    def addReference(self): return _vrpn_Tracker.vrpn_Connection_addReference(self)
    def removeReference(self): return _vrpn_Tracker.vrpn_Connection_removeReference(self)
    def setAutoDeleteStatus(self, *args): return _vrpn_Tracker.vrpn_Connection_setAutoDeleteStatus(self, *args)
    __swig_setmethods__["d_dispatcher"] = _vrpn_Tracker.vrpn_Connection_d_dispatcher_set
    __swig_getmethods__["d_dispatcher"] = _vrpn_Tracker.vrpn_Connection_d_dispatcher_get
    if _newclass:d_dispatcher = _swig_property(_vrpn_Tracker.vrpn_Connection_d_dispatcher_get, _vrpn_Tracker.vrpn_Connection_d_dispatcher_set)
vrpn_Connection_swigregister = _vrpn_Tracker.vrpn_Connection_swigregister
vrpn_Connection_swigregister(vrpn_Connection)

class vrpn_Connection_IP(vrpn_Connection):
    __swig_setmethods__ = {}
    for _s in [vrpn_Connection]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, vrpn_Connection_IP, name, value)
    __swig_getmethods__ = {}
    for _s in [vrpn_Connection]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, vrpn_Connection_IP, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vrpn_Tracker.new_vrpn_Connection_IP(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrpn_Tracker.delete_vrpn_Connection_IP
    __del__ = lambda self : None;
    def connect_to_client(self, *args): return _vrpn_Tracker.vrpn_Connection_IP_connect_to_client(self, *args)
    def mainloop(self, timeout = None): return _vrpn_Tracker.vrpn_Connection_IP_mainloop(self, timeout)
vrpn_Connection_IP_swigregister = _vrpn_Tracker.vrpn_Connection_IP_swigregister
vrpn_Connection_IP_swigregister(vrpn_Connection_IP)

class vrpn_Connection_Loopback(vrpn_Connection):
    __swig_setmethods__ = {}
    for _s in [vrpn_Connection]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, vrpn_Connection_Loopback, name, value)
    __swig_getmethods__ = {}
    for _s in [vrpn_Connection]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, vrpn_Connection_Loopback, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _vrpn_Tracker.delete_vrpn_Connection_Loopback
    __del__ = lambda self : None;
    def mainloop(self, timeout = None): return _vrpn_Tracker.vrpn_Connection_Loopback_mainloop(self, timeout)
    def doing_okay(self): return _vrpn_Tracker.vrpn_Connection_Loopback_doing_okay(self)
    def connected(self): return _vrpn_Tracker.vrpn_Connection_Loopback_connected(self)
vrpn_Connection_Loopback_swigregister = _vrpn_Tracker.vrpn_Connection_Loopback_swigregister
vrpn_Connection_Loopback_swigregister(vrpn_Connection_Loopback)


def vrpn_copy_service_name(*args):
  return _vrpn_Tracker.vrpn_copy_service_name(*args)
vrpn_copy_service_name = _vrpn_Tracker.vrpn_copy_service_name

def vrpn_copy_service_location(*args):
  return _vrpn_Tracker.vrpn_copy_service_location(*args)
vrpn_copy_service_location = _vrpn_Tracker.vrpn_copy_service_location

def vrpn_copy_file_name(*args):
  return _vrpn_Tracker.vrpn_copy_file_name(*args)
vrpn_copy_file_name = _vrpn_Tracker.vrpn_copy_file_name

def vrpn_copy_machine_name(*args):
  return _vrpn_Tracker.vrpn_copy_machine_name(*args)
vrpn_copy_machine_name = _vrpn_Tracker.vrpn_copy_machine_name

def vrpn_get_port_number(*args):
  return _vrpn_Tracker.vrpn_get_port_number(*args)
vrpn_get_port_number = _vrpn_Tracker.vrpn_get_port_number

def vrpn_copy_rsh_program(*args):
  return _vrpn_Tracker.vrpn_copy_rsh_program(*args)
vrpn_copy_rsh_program = _vrpn_Tracker.vrpn_copy_rsh_program

def vrpn_copy_rsh_arguments(*args):
  return _vrpn_Tracker.vrpn_copy_rsh_arguments(*args)
vrpn_copy_rsh_arguments = _vrpn_Tracker.vrpn_copy_rsh_arguments

def vrpn_set_service_name(*args):
  return _vrpn_Tracker.vrpn_set_service_name(*args)
vrpn_set_service_name = _vrpn_Tracker.vrpn_set_service_name

def check_vrpn_cookie(*args):
  return _vrpn_Tracker.check_vrpn_cookie(*args)
check_vrpn_cookie = _vrpn_Tracker.check_vrpn_cookie

def check_vrpn_file_cookie(*args):
  return _vrpn_Tracker.check_vrpn_file_cookie(*args)
check_vrpn_file_cookie = _vrpn_Tracker.check_vrpn_file_cookie

def vrpn_cookie_size():
  return _vrpn_Tracker.vrpn_cookie_size()
vrpn_cookie_size = _vrpn_Tracker.vrpn_cookie_size

def write_vrpn_cookie(*args):
  return _vrpn_Tracker.write_vrpn_cookie(*args)
write_vrpn_cookie = _vrpn_Tracker.write_vrpn_cookie

def vrpn_noint_block_write(*args):
  return _vrpn_Tracker.vrpn_noint_block_write(*args)
vrpn_noint_block_write = _vrpn_Tracker.vrpn_noint_block_write

def vrpn_noint_block_read(*args):
  return _vrpn_Tracker.vrpn_noint_block_read(*args)
vrpn_noint_block_read = _vrpn_Tracker.vrpn_noint_block_read

def vrpn_noint_select(*args):
  return _vrpn_Tracker.vrpn_noint_select(*args)
vrpn_noint_select = _vrpn_Tracker.vrpn_noint_select
class vrpn_ConnectionManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vrpn_ConnectionManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vrpn_ConnectionManager, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _vrpn_Tracker.delete_vrpn_ConnectionManager
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _vrpn_Tracker.vrpn_ConnectionManager_instance
    if _newclass:instance = staticmethod(_vrpn_Tracker.vrpn_ConnectionManager_instance)
    def addConnection(self, *args): return _vrpn_Tracker.vrpn_ConnectionManager_addConnection(self, *args)
    def deleteConnection(self, *args): return _vrpn_Tracker.vrpn_ConnectionManager_deleteConnection(self, *args)
    def getByName(self, *args): return _vrpn_Tracker.vrpn_ConnectionManager_getByName(self, *args)
vrpn_ConnectionManager_swigregister = _vrpn_Tracker.vrpn_ConnectionManager_swigregister
vrpn_ConnectionManager_swigregister(vrpn_ConnectionManager)

def vrpn_get_connection_by_name(*args):
  return _vrpn_Tracker.vrpn_get_connection_by_name(*args)
vrpn_get_connection_by_name = _vrpn_Tracker.vrpn_get_connection_by_name

def vrpn_create_server_connection(*args):
  return _vrpn_Tracker.vrpn_create_server_connection(*args)
vrpn_create_server_connection = _vrpn_Tracker.vrpn_create_server_connection

def vrpn_ConnectionManager_instance():
  return _vrpn_Tracker.vrpn_ConnectionManager_instance()
vrpn_ConnectionManager_instance = _vrpn_Tracker.vrpn_ConnectionManager_instance

class vrpn_Tracker(vrpn_BaseClass):
    __swig_setmethods__ = {}
    for _s in [vrpn_BaseClass]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, vrpn_Tracker, name, value)
    __swig_getmethods__ = {}
    for _s in [vrpn_BaseClass]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, vrpn_Tracker, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vrpn_Tracker.delete_vrpn_Tracker
    __del__ = lambda self : None;
    def read_config_file(self, *args): return _vrpn_Tracker.vrpn_Tracker_read_config_file(self, *args)
    def print_latest_report(self): return _vrpn_Tracker.vrpn_Tracker_print_latest_report(self)
    def register_server_handlers(self): return _vrpn_Tracker.vrpn_Tracker_register_server_handlers(self)
    def get_local_t2r(self, *args): return _vrpn_Tracker.vrpn_Tracker_get_local_t2r(self, *args)
    def get_local_u2s(self, *args): return _vrpn_Tracker.vrpn_Tracker_get_local_u2s(self, *args)
    __swig_getmethods__["handle_t2r_request"] = lambda x: _vrpn_Tracker.vrpn_Tracker_handle_t2r_request
    if _newclass:handle_t2r_request = staticmethod(_vrpn_Tracker.vrpn_Tracker_handle_t2r_request)
    __swig_getmethods__["handle_u2s_request"] = lambda x: _vrpn_Tracker.vrpn_Tracker_handle_u2s_request
    if _newclass:handle_u2s_request = staticmethod(_vrpn_Tracker.vrpn_Tracker_handle_u2s_request)
    __swig_getmethods__["handle_workspace_request"] = lambda x: _vrpn_Tracker.vrpn_Tracker_handle_workspace_request
    if _newclass:handle_workspace_request = staticmethod(_vrpn_Tracker.vrpn_Tracker_handle_workspace_request)
vrpn_Tracker_swigregister = _vrpn_Tracker.vrpn_Tracker_swigregister
vrpn_Tracker_swigregister(vrpn_Tracker)
vrpn_TRACKER_SYNCING = cvar.vrpn_TRACKER_SYNCING
vrpn_TRACKER_AWAITING_STATION = cvar.vrpn_TRACKER_AWAITING_STATION
vrpn_TRACKER_REPORT_READY = cvar.vrpn_TRACKER_REPORT_READY
vrpn_TRACKER_PARTIAL = cvar.vrpn_TRACKER_PARTIAL
vrpn_TRACKER_RESETTING = cvar.vrpn_TRACKER_RESETTING
vrpn_TRACKER_FAIL = cvar.vrpn_TRACKER_FAIL
vrpn_ALL_SENSORS = cvar.vrpn_ALL_SENSORS

def vrpn_Tracker_handle_t2r_request(*args):
  return _vrpn_Tracker.vrpn_Tracker_handle_t2r_request(*args)
vrpn_Tracker_handle_t2r_request = _vrpn_Tracker.vrpn_Tracker_handle_t2r_request

def vrpn_Tracker_handle_u2s_request(*args):
  return _vrpn_Tracker.vrpn_Tracker_handle_u2s_request(*args)
vrpn_Tracker_handle_u2s_request = _vrpn_Tracker.vrpn_Tracker_handle_u2s_request

def vrpn_Tracker_handle_workspace_request(*args):
  return _vrpn_Tracker.vrpn_Tracker_handle_workspace_request(*args)
vrpn_Tracker_handle_workspace_request = _vrpn_Tracker.vrpn_Tracker_handle_workspace_request

VRPN_TRACKER_BUF_SIZE = _vrpn_Tracker.VRPN_TRACKER_BUF_SIZE
class vrpn_Tracker_Serial(vrpn_Tracker):
    __swig_setmethods__ = {}
    for _s in [vrpn_Tracker]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, vrpn_Tracker_Serial, name, value)
    __swig_getmethods__ = {}
    for _s in [vrpn_Tracker]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, vrpn_Tracker_Serial, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vrpn_Tracker.delete_vrpn_Tracker_Serial
    __del__ = lambda self : None;
    def mainloop(self): return _vrpn_Tracker.vrpn_Tracker_Serial_mainloop(self)
vrpn_Tracker_Serial_swigregister = _vrpn_Tracker.vrpn_Tracker_Serial_swigregister
vrpn_Tracker_Serial_swigregister(vrpn_Tracker_Serial)

class vrpn_Tracker_NULL(vrpn_Tracker):
    __swig_setmethods__ = {}
    for _s in [vrpn_Tracker]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, vrpn_Tracker_NULL, name, value)
    __swig_getmethods__ = {}
    for _s in [vrpn_Tracker]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, vrpn_Tracker_NULL, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vrpn_Tracker.new_vrpn_Tracker_NULL(*args)
        try: self.this.append(this)
        except: self.this = this
    def mainloop(self): return _vrpn_Tracker.vrpn_Tracker_NULL_mainloop(self)
    def setRedundantTransmission(self, *args): return _vrpn_Tracker.vrpn_Tracker_NULL_setRedundantTransmission(self, *args)
    __swig_destroy__ = _vrpn_Tracker.delete_vrpn_Tracker_NULL
    __del__ = lambda self : None;
vrpn_Tracker_NULL_swigregister = _vrpn_Tracker.vrpn_Tracker_NULL_swigregister
vrpn_Tracker_NULL_swigregister(vrpn_Tracker_NULL)

class vrpn_Tracker_Server(vrpn_Tracker):
    __swig_setmethods__ = {}
    for _s in [vrpn_Tracker]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, vrpn_Tracker_Server, name, value)
    __swig_getmethods__ = {}
    for _s in [vrpn_Tracker]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, vrpn_Tracker_Server, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vrpn_Tracker.new_vrpn_Tracker_Server(*args)
        try: self.this.append(this)
        except: self.this = this
    def mainloop(self): return _vrpn_Tracker.vrpn_Tracker_Server_mainloop(self)
    def report_pose(self, *args): return _vrpn_Tracker.vrpn_Tracker_Server_report_pose(self, *args)
    def report_pose_velocity(self, *args): return _vrpn_Tracker.vrpn_Tracker_Server_report_pose_velocity(self, *args)
    def report_pose_acceleration(self, *args): return _vrpn_Tracker.vrpn_Tracker_Server_report_pose_acceleration(self, *args)
    __swig_destroy__ = _vrpn_Tracker.delete_vrpn_Tracker_Server
    __del__ = lambda self : None;
vrpn_Tracker_Server_swigregister = _vrpn_Tracker.vrpn_Tracker_Server_swigregister
vrpn_Tracker_Server_swigregister(vrpn_Tracker_Server)

class vrpn_TRACKERCB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vrpn_TRACKERCB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vrpn_TRACKERCB, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msg_time"] = _vrpn_Tracker.vrpn_TRACKERCB_msg_time_set
    __swig_getmethods__["msg_time"] = _vrpn_Tracker.vrpn_TRACKERCB_msg_time_get
    if _newclass:msg_time = _swig_property(_vrpn_Tracker.vrpn_TRACKERCB_msg_time_get, _vrpn_Tracker.vrpn_TRACKERCB_msg_time_set)
    __swig_setmethods__["sensor"] = _vrpn_Tracker.vrpn_TRACKERCB_sensor_set
    __swig_getmethods__["sensor"] = _vrpn_Tracker.vrpn_TRACKERCB_sensor_get
    if _newclass:sensor = _swig_property(_vrpn_Tracker.vrpn_TRACKERCB_sensor_get, _vrpn_Tracker.vrpn_TRACKERCB_sensor_set)
    __swig_setmethods__["pos"] = _vrpn_Tracker.vrpn_TRACKERCB_pos_set
    __swig_getmethods__["pos"] = _vrpn_Tracker.vrpn_TRACKERCB_pos_get
    if _newclass:pos = _swig_property(_vrpn_Tracker.vrpn_TRACKERCB_pos_get, _vrpn_Tracker.vrpn_TRACKERCB_pos_set)
    __swig_setmethods__["quat"] = _vrpn_Tracker.vrpn_TRACKERCB_quat_set
    __swig_getmethods__["quat"] = _vrpn_Tracker.vrpn_TRACKERCB_quat_get
    if _newclass:quat = _swig_property(_vrpn_Tracker.vrpn_TRACKERCB_quat_get, _vrpn_Tracker.vrpn_TRACKERCB_quat_set)
    def __init__(self): 
        this = _vrpn_Tracker.new_vrpn_TRACKERCB()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrpn_Tracker.delete_vrpn_TRACKERCB
    __del__ = lambda self : None;
vrpn_TRACKERCB_swigregister = _vrpn_Tracker.vrpn_TRACKERCB_swigregister
vrpn_TRACKERCB_swigregister(vrpn_TRACKERCB)

class vrpn_TRACKERVELCB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vrpn_TRACKERVELCB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vrpn_TRACKERVELCB, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msg_time"] = _vrpn_Tracker.vrpn_TRACKERVELCB_msg_time_set
    __swig_getmethods__["msg_time"] = _vrpn_Tracker.vrpn_TRACKERVELCB_msg_time_get
    if _newclass:msg_time = _swig_property(_vrpn_Tracker.vrpn_TRACKERVELCB_msg_time_get, _vrpn_Tracker.vrpn_TRACKERVELCB_msg_time_set)
    __swig_setmethods__["sensor"] = _vrpn_Tracker.vrpn_TRACKERVELCB_sensor_set
    __swig_getmethods__["sensor"] = _vrpn_Tracker.vrpn_TRACKERVELCB_sensor_get
    if _newclass:sensor = _swig_property(_vrpn_Tracker.vrpn_TRACKERVELCB_sensor_get, _vrpn_Tracker.vrpn_TRACKERVELCB_sensor_set)
    __swig_setmethods__["vel"] = _vrpn_Tracker.vrpn_TRACKERVELCB_vel_set
    __swig_getmethods__["vel"] = _vrpn_Tracker.vrpn_TRACKERVELCB_vel_get
    if _newclass:vel = _swig_property(_vrpn_Tracker.vrpn_TRACKERVELCB_vel_get, _vrpn_Tracker.vrpn_TRACKERVELCB_vel_set)
    __swig_setmethods__["vel_quat"] = _vrpn_Tracker.vrpn_TRACKERVELCB_vel_quat_set
    __swig_getmethods__["vel_quat"] = _vrpn_Tracker.vrpn_TRACKERVELCB_vel_quat_get
    if _newclass:vel_quat = _swig_property(_vrpn_Tracker.vrpn_TRACKERVELCB_vel_quat_get, _vrpn_Tracker.vrpn_TRACKERVELCB_vel_quat_set)
    __swig_setmethods__["vel_quat_dt"] = _vrpn_Tracker.vrpn_TRACKERVELCB_vel_quat_dt_set
    __swig_getmethods__["vel_quat_dt"] = _vrpn_Tracker.vrpn_TRACKERVELCB_vel_quat_dt_get
    if _newclass:vel_quat_dt = _swig_property(_vrpn_Tracker.vrpn_TRACKERVELCB_vel_quat_dt_get, _vrpn_Tracker.vrpn_TRACKERVELCB_vel_quat_dt_set)
    def __init__(self): 
        this = _vrpn_Tracker.new_vrpn_TRACKERVELCB()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrpn_Tracker.delete_vrpn_TRACKERVELCB
    __del__ = lambda self : None;
vrpn_TRACKERVELCB_swigregister = _vrpn_Tracker.vrpn_TRACKERVELCB_swigregister
vrpn_TRACKERVELCB_swigregister(vrpn_TRACKERVELCB)

class vrpn_TRACKERACCCB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vrpn_TRACKERACCCB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vrpn_TRACKERACCCB, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msg_time"] = _vrpn_Tracker.vrpn_TRACKERACCCB_msg_time_set
    __swig_getmethods__["msg_time"] = _vrpn_Tracker.vrpn_TRACKERACCCB_msg_time_get
    if _newclass:msg_time = _swig_property(_vrpn_Tracker.vrpn_TRACKERACCCB_msg_time_get, _vrpn_Tracker.vrpn_TRACKERACCCB_msg_time_set)
    __swig_setmethods__["sensor"] = _vrpn_Tracker.vrpn_TRACKERACCCB_sensor_set
    __swig_getmethods__["sensor"] = _vrpn_Tracker.vrpn_TRACKERACCCB_sensor_get
    if _newclass:sensor = _swig_property(_vrpn_Tracker.vrpn_TRACKERACCCB_sensor_get, _vrpn_Tracker.vrpn_TRACKERACCCB_sensor_set)
    __swig_setmethods__["acc"] = _vrpn_Tracker.vrpn_TRACKERACCCB_acc_set
    __swig_getmethods__["acc"] = _vrpn_Tracker.vrpn_TRACKERACCCB_acc_get
    if _newclass:acc = _swig_property(_vrpn_Tracker.vrpn_TRACKERACCCB_acc_get, _vrpn_Tracker.vrpn_TRACKERACCCB_acc_set)
    __swig_setmethods__["acc_quat"] = _vrpn_Tracker.vrpn_TRACKERACCCB_acc_quat_set
    __swig_getmethods__["acc_quat"] = _vrpn_Tracker.vrpn_TRACKERACCCB_acc_quat_get
    if _newclass:acc_quat = _swig_property(_vrpn_Tracker.vrpn_TRACKERACCCB_acc_quat_get, _vrpn_Tracker.vrpn_TRACKERACCCB_acc_quat_set)
    __swig_setmethods__["acc_quat_dt"] = _vrpn_Tracker.vrpn_TRACKERACCCB_acc_quat_dt_set
    __swig_getmethods__["acc_quat_dt"] = _vrpn_Tracker.vrpn_TRACKERACCCB_acc_quat_dt_get
    if _newclass:acc_quat_dt = _swig_property(_vrpn_Tracker.vrpn_TRACKERACCCB_acc_quat_dt_get, _vrpn_Tracker.vrpn_TRACKERACCCB_acc_quat_dt_set)
    def __init__(self): 
        this = _vrpn_Tracker.new_vrpn_TRACKERACCCB()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrpn_Tracker.delete_vrpn_TRACKERACCCB
    __del__ = lambda self : None;
vrpn_TRACKERACCCB_swigregister = _vrpn_Tracker.vrpn_TRACKERACCCB_swigregister
vrpn_TRACKERACCCB_swigregister(vrpn_TRACKERACCCB)

class vrpn_TRACKERTRACKER2ROOMCB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vrpn_TRACKERTRACKER2ROOMCB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vrpn_TRACKERTRACKER2ROOMCB, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msg_time"] = _vrpn_Tracker.vrpn_TRACKERTRACKER2ROOMCB_msg_time_set
    __swig_getmethods__["msg_time"] = _vrpn_Tracker.vrpn_TRACKERTRACKER2ROOMCB_msg_time_get
    if _newclass:msg_time = _swig_property(_vrpn_Tracker.vrpn_TRACKERTRACKER2ROOMCB_msg_time_get, _vrpn_Tracker.vrpn_TRACKERTRACKER2ROOMCB_msg_time_set)
    __swig_setmethods__["tracker2room"] = _vrpn_Tracker.vrpn_TRACKERTRACKER2ROOMCB_tracker2room_set
    __swig_getmethods__["tracker2room"] = _vrpn_Tracker.vrpn_TRACKERTRACKER2ROOMCB_tracker2room_get
    if _newclass:tracker2room = _swig_property(_vrpn_Tracker.vrpn_TRACKERTRACKER2ROOMCB_tracker2room_get, _vrpn_Tracker.vrpn_TRACKERTRACKER2ROOMCB_tracker2room_set)
    __swig_setmethods__["tracker2room_quat"] = _vrpn_Tracker.vrpn_TRACKERTRACKER2ROOMCB_tracker2room_quat_set
    __swig_getmethods__["tracker2room_quat"] = _vrpn_Tracker.vrpn_TRACKERTRACKER2ROOMCB_tracker2room_quat_get
    if _newclass:tracker2room_quat = _swig_property(_vrpn_Tracker.vrpn_TRACKERTRACKER2ROOMCB_tracker2room_quat_get, _vrpn_Tracker.vrpn_TRACKERTRACKER2ROOMCB_tracker2room_quat_set)
    def __init__(self): 
        this = _vrpn_Tracker.new_vrpn_TRACKERTRACKER2ROOMCB()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrpn_Tracker.delete_vrpn_TRACKERTRACKER2ROOMCB
    __del__ = lambda self : None;
vrpn_TRACKERTRACKER2ROOMCB_swigregister = _vrpn_Tracker.vrpn_TRACKERTRACKER2ROOMCB_swigregister
vrpn_TRACKERTRACKER2ROOMCB_swigregister(vrpn_TRACKERTRACKER2ROOMCB)

class vrpn_TRACKERUNIT2SENSORCB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vrpn_TRACKERUNIT2SENSORCB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vrpn_TRACKERUNIT2SENSORCB, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msg_time"] = _vrpn_Tracker.vrpn_TRACKERUNIT2SENSORCB_msg_time_set
    __swig_getmethods__["msg_time"] = _vrpn_Tracker.vrpn_TRACKERUNIT2SENSORCB_msg_time_get
    if _newclass:msg_time = _swig_property(_vrpn_Tracker.vrpn_TRACKERUNIT2SENSORCB_msg_time_get, _vrpn_Tracker.vrpn_TRACKERUNIT2SENSORCB_msg_time_set)
    __swig_setmethods__["sensor"] = _vrpn_Tracker.vrpn_TRACKERUNIT2SENSORCB_sensor_set
    __swig_getmethods__["sensor"] = _vrpn_Tracker.vrpn_TRACKERUNIT2SENSORCB_sensor_get
    if _newclass:sensor = _swig_property(_vrpn_Tracker.vrpn_TRACKERUNIT2SENSORCB_sensor_get, _vrpn_Tracker.vrpn_TRACKERUNIT2SENSORCB_sensor_set)
    __swig_setmethods__["unit2sensor"] = _vrpn_Tracker.vrpn_TRACKERUNIT2SENSORCB_unit2sensor_set
    __swig_getmethods__["unit2sensor"] = _vrpn_Tracker.vrpn_TRACKERUNIT2SENSORCB_unit2sensor_get
    if _newclass:unit2sensor = _swig_property(_vrpn_Tracker.vrpn_TRACKERUNIT2SENSORCB_unit2sensor_get, _vrpn_Tracker.vrpn_TRACKERUNIT2SENSORCB_unit2sensor_set)
    __swig_setmethods__["unit2sensor_quat"] = _vrpn_Tracker.vrpn_TRACKERUNIT2SENSORCB_unit2sensor_quat_set
    __swig_getmethods__["unit2sensor_quat"] = _vrpn_Tracker.vrpn_TRACKERUNIT2SENSORCB_unit2sensor_quat_get
    if _newclass:unit2sensor_quat = _swig_property(_vrpn_Tracker.vrpn_TRACKERUNIT2SENSORCB_unit2sensor_quat_get, _vrpn_Tracker.vrpn_TRACKERUNIT2SENSORCB_unit2sensor_quat_set)
    def __init__(self): 
        this = _vrpn_Tracker.new_vrpn_TRACKERUNIT2SENSORCB()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrpn_Tracker.delete_vrpn_TRACKERUNIT2SENSORCB
    __del__ = lambda self : None;
vrpn_TRACKERUNIT2SENSORCB_swigregister = _vrpn_Tracker.vrpn_TRACKERUNIT2SENSORCB_swigregister
vrpn_TRACKERUNIT2SENSORCB_swigregister(vrpn_TRACKERUNIT2SENSORCB)

class vrpn_TRACKERWORKSPACECB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vrpn_TRACKERWORKSPACECB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vrpn_TRACKERWORKSPACECB, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msg_time"] = _vrpn_Tracker.vrpn_TRACKERWORKSPACECB_msg_time_set
    __swig_getmethods__["msg_time"] = _vrpn_Tracker.vrpn_TRACKERWORKSPACECB_msg_time_get
    if _newclass:msg_time = _swig_property(_vrpn_Tracker.vrpn_TRACKERWORKSPACECB_msg_time_get, _vrpn_Tracker.vrpn_TRACKERWORKSPACECB_msg_time_set)
    __swig_setmethods__["workspace_min"] = _vrpn_Tracker.vrpn_TRACKERWORKSPACECB_workspace_min_set
    __swig_getmethods__["workspace_min"] = _vrpn_Tracker.vrpn_TRACKERWORKSPACECB_workspace_min_get
    if _newclass:workspace_min = _swig_property(_vrpn_Tracker.vrpn_TRACKERWORKSPACECB_workspace_min_get, _vrpn_Tracker.vrpn_TRACKERWORKSPACECB_workspace_min_set)
    __swig_setmethods__["workspace_max"] = _vrpn_Tracker.vrpn_TRACKERWORKSPACECB_workspace_max_set
    __swig_getmethods__["workspace_max"] = _vrpn_Tracker.vrpn_TRACKERWORKSPACECB_workspace_max_get
    if _newclass:workspace_max = _swig_property(_vrpn_Tracker.vrpn_TRACKERWORKSPACECB_workspace_max_get, _vrpn_Tracker.vrpn_TRACKERWORKSPACECB_workspace_max_set)
    def __init__(self): 
        this = _vrpn_Tracker.new_vrpn_TRACKERWORKSPACECB()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrpn_Tracker.delete_vrpn_TRACKERWORKSPACECB
    __del__ = lambda self : None;
vrpn_TRACKERWORKSPACECB_swigregister = _vrpn_Tracker.vrpn_TRACKERWORKSPACECB_swigregister
vrpn_TRACKERWORKSPACECB_swigregister(vrpn_TRACKERWORKSPACECB)

class vrpn_Tracker_Sensor_Callbacks(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vrpn_Tracker_Sensor_Callbacks, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vrpn_Tracker_Sensor_Callbacks, name)
    __repr__ = _swig_repr
    __swig_setmethods__["d_change"] = _vrpn_Tracker.vrpn_Tracker_Sensor_Callbacks_d_change_set
    __swig_getmethods__["d_change"] = _vrpn_Tracker.vrpn_Tracker_Sensor_Callbacks_d_change_get
    if _newclass:d_change = _swig_property(_vrpn_Tracker.vrpn_Tracker_Sensor_Callbacks_d_change_get, _vrpn_Tracker.vrpn_Tracker_Sensor_Callbacks_d_change_set)
    __swig_setmethods__["d_velchange"] = _vrpn_Tracker.vrpn_Tracker_Sensor_Callbacks_d_velchange_set
    __swig_getmethods__["d_velchange"] = _vrpn_Tracker.vrpn_Tracker_Sensor_Callbacks_d_velchange_get
    if _newclass:d_velchange = _swig_property(_vrpn_Tracker.vrpn_Tracker_Sensor_Callbacks_d_velchange_get, _vrpn_Tracker.vrpn_Tracker_Sensor_Callbacks_d_velchange_set)
    __swig_setmethods__["d_accchange"] = _vrpn_Tracker.vrpn_Tracker_Sensor_Callbacks_d_accchange_set
    __swig_getmethods__["d_accchange"] = _vrpn_Tracker.vrpn_Tracker_Sensor_Callbacks_d_accchange_get
    if _newclass:d_accchange = _swig_property(_vrpn_Tracker.vrpn_Tracker_Sensor_Callbacks_d_accchange_get, _vrpn_Tracker.vrpn_Tracker_Sensor_Callbacks_d_accchange_set)
    __swig_setmethods__["d_unit2sensorchange"] = _vrpn_Tracker.vrpn_Tracker_Sensor_Callbacks_d_unit2sensorchange_set
    __swig_getmethods__["d_unit2sensorchange"] = _vrpn_Tracker.vrpn_Tracker_Sensor_Callbacks_d_unit2sensorchange_get
    if _newclass:d_unit2sensorchange = _swig_property(_vrpn_Tracker.vrpn_Tracker_Sensor_Callbacks_d_unit2sensorchange_get, _vrpn_Tracker.vrpn_Tracker_Sensor_Callbacks_d_unit2sensorchange_set)
    def __init__(self): 
        this = _vrpn_Tracker.new_vrpn_Tracker_Sensor_Callbacks()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrpn_Tracker.delete_vrpn_Tracker_Sensor_Callbacks
    __del__ = lambda self : None;
vrpn_Tracker_Sensor_Callbacks_swigregister = _vrpn_Tracker.vrpn_Tracker_Sensor_Callbacks_swigregister
vrpn_Tracker_Sensor_Callbacks_swigregister(vrpn_Tracker_Sensor_Callbacks)

class vrpn_Tracker_Remote(vrpn_Tracker):
    __swig_setmethods__ = {}
    for _s in [vrpn_Tracker]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, vrpn_Tracker_Remote, name, value)
    __swig_getmethods__ = {}
    for _s in [vrpn_Tracker]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, vrpn_Tracker_Remote, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vrpn_Tracker.new_vrpn_Tracker_Remote(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrpn_Tracker.delete_vrpn_Tracker_Remote
    __del__ = lambda self : None;
    def request_t2r_xform(self): return _vrpn_Tracker.vrpn_Tracker_Remote_request_t2r_xform(self)
    def request_u2s_xform(self): return _vrpn_Tracker.vrpn_Tracker_Remote_request_u2s_xform(self)
    def request_workspace(self): return _vrpn_Tracker.vrpn_Tracker_Remote_request_workspace(self)
    def set_update_rate(self, *args): return _vrpn_Tracker.vrpn_Tracker_Remote_set_update_rate(self, *args)
    def reset_origin(self): return _vrpn_Tracker.vrpn_Tracker_Remote_reset_origin(self)
    def mainloop(self): return _vrpn_Tracker.vrpn_Tracker_Remote_mainloop(self)
    def register_change_handler(self, *args): return _vrpn_Tracker.vrpn_Tracker_Remote_register_change_handler(self, *args)
    def unregister_change_handler(self, *args): return _vrpn_Tracker.vrpn_Tracker_Remote_unregister_change_handler(self, *args)
vrpn_Tracker_Remote_swigregister = _vrpn_Tracker.vrpn_Tracker_Remote_swigregister
vrpn_Tracker_Remote_swigregister(vrpn_Tracker_Remote)


def register_tracker_change_handler(*args):
  return _vrpn_Tracker.register_tracker_change_handler(*args)
register_tracker_change_handler = _vrpn_Tracker.register_tracker_change_handler

def get_tracker_change_handler():
  return _vrpn_Tracker.get_tracker_change_handler()
get_tracker_change_handler = _vrpn_Tracker.get_tracker_change_handler

def register_trackervel_change_handler(*args):
  return _vrpn_Tracker.register_trackervel_change_handler(*args)
register_trackervel_change_handler = _vrpn_Tracker.register_trackervel_change_handler

def get_trackervel_change_handler():
  return _vrpn_Tracker.get_trackervel_change_handler()
get_trackervel_change_handler = _vrpn_Tracker.get_trackervel_change_handler

def register_trackeracc_change_handler(*args):
  return _vrpn_Tracker.register_trackeracc_change_handler(*args)
register_trackeracc_change_handler = _vrpn_Tracker.register_trackeracc_change_handler

def get_trackeracc_change_handler():
  return _vrpn_Tracker.get_trackeracc_change_handler()
get_trackeracc_change_handler = _vrpn_Tracker.get_trackeracc_change_handler

def register_tracker2room_change_handler(*args):
  return _vrpn_Tracker.register_tracker2room_change_handler(*args)
register_tracker2room_change_handler = _vrpn_Tracker.register_tracker2room_change_handler

def get_tracker2room_change_handler():
  return _vrpn_Tracker.get_tracker2room_change_handler()
get_tracker2room_change_handler = _vrpn_Tracker.get_tracker2room_change_handler

def register_trackerunit2sensor_change_handler(*args):
  return _vrpn_Tracker.register_trackerunit2sensor_change_handler(*args)
register_trackerunit2sensor_change_handler = _vrpn_Tracker.register_trackerunit2sensor_change_handler

def get_trackerunit2sensor_change_handler():
  return _vrpn_Tracker.get_trackerunit2sensor_change_handler()
get_trackerunit2sensor_change_handler = _vrpn_Tracker.get_trackerunit2sensor_change_handler

def register_trackerworkspace_change_handler(*args):
  return _vrpn_Tracker.register_trackerworkspace_change_handler(*args)
register_trackerworkspace_change_handler = _vrpn_Tracker.register_trackerworkspace_change_handler

def get_trackerworkspace_change_handler():
  return _vrpn_Tracker.get_trackerworkspace_change_handler()
get_trackerworkspace_change_handler = _vrpn_Tracker.get_trackerworkspace_change_handler


